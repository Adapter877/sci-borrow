name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  ORIGINAL_IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      full_image_tag: ${{ steps.set_full_image_tag.outputs.full_image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase image name
        id: set_image_name
        run: echo "IMAGE_NAME=$(echo ${{ env.ORIGINAL_IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Get latest tag from GitHub API
        id: get-latest-tag
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name')
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
      
      - name: Print latest tag for debugging
        run: echo "LATEST_TAG=${{ env.LATEST_TAG }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          build-args: LATEST_TAG=${{ env.LATEST_TAG }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}

      - name: Set full image tag
        id: set_full_image_tag
        run: |
          CLEANED_SHA=$(echo $GITHUB_SHA | sed 's/sha-//')
          FULL_IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${CLEANED_SHA}
          echo "::set-output name=full_image_tag::$FULL_IMAGE_TAG"
        env:
          GITHUB_SHA: ${{ github.sha }}

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Setup Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"

      - name: Checkout gitops repository
        uses: actions/checkout@v3
        with:
          repository: Adapter877/sci-borrow
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Install yq
        run: |
          sudo curl -sL https://github.com/mikefarah/yq/releases/download/v4.17.1/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq
      
      - name: Update image tag for UAT
        if: ${{ contains(github.event.release.tag_name, '-beta') }}
        env:
          FULL_IMAGE_TAG: ${{ needs.build.outputs.full_image_tag }}
        run: |
          echo "Updating image tag to: $FULL_IMAGE_TAG"
          yq eval ".spec.template.spec.containers[0].image = \"$FULL_IMAGE_TAG\"" -i deployment/deployment.yaml
          git add deployment/deployment.yaml
          git commit -m "Set 'web' image tag to '${FULL_IMAGE_TAG}'"
          git push

      - name: Check deployment file content
        run: cat deployment/deployment.yaml
